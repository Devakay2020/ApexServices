using System.Web.Script.Serialization;
using ApexServices.CashDeposit;
using ApexServices.Models.Data;
using NLog;

namespace ApexServices.Models.ServiceCall
{
    public class CashDeposit : IServiceCall
    {
        private static readonly Logger Log = LogManager.GetCurrentClassLogger();

        public JsonResponse Process(object data)
        {
            var depositData = (Data.CashDepositRequest)data;

            var requestData = new ApexServices.CashDeposit.CashDeposit();
            requestData.AcctNo = depositData.AccNo;
            requestData.EBSUserID = depositData.EBSUserId;
            requestData.MessageID = depositData.EBSMessageID;
            requestData.MessageType = depositData.EBSMessageType;
            requestData.TransactionNarrativeLine1 = depositData.Narrative1;
            requestData.TransactionNarrativeLine2 = depositData.Narrative2;
            requestData.TransactionNarrativeLine3 = depositData.Narrative3;
            requestData.TransactionNarrativeLine4 = depositData.Narrative4;
            requestData.PostToCashAccount = depositData.PostToCashAccount;
            requestData.SourceID = "ENGAGE";
            requestData.TransactionAmount = depositData.TransactionAmount;
            requestData.TransactionCurrency = depositData.TransactionCurrency;
            requestData.TransactionReference = depositData.TransactionReference;
            requestData.ValueDate = depositData.ValueDate;
            requestData.WorkstationID = Settings.Workstation;

            var requestJson = new JavaScriptSerializer().Serialize(requestData);
            LogHelper.Trace(Log, "Request data : " + requestJson);

            LogHelper.Info(Log, "About to send request, request params are : " + requestData.ToString());
            
            var client = new BB_Services_CashierServices_orcCashDeposit_ReceiveCashDepositRequestPortSoapClient();
            var returnValue = client.CashDeposit(requestData);
            return new JsonResponse() { Data = returnValue };
        }

        public object ParseData(string data)
        {
            return new JavaScriptSerializer().Deserialize<Models.Data.CashDepositRequest>(data);
        }
    }
}